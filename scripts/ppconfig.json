{"name":"bili","url":"https://www.bilibili.com/","showName":"哔哩哔哩PWA","appid":"com.douyin.app","icon":"","iconRound":false,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":false,"version":"0.0.1","preview":"desktop","platform":["1-1"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"(function () {\n  'use strict';\n\n  const CONFIG = {\n    OBSERVER_THROTTLE: 100,\n    LOCK_INTERVAL: 5000,        // 从 150ms 提升到 5s，避免频繁执行\n    SHADOW_DEPTH: 3\n  };\n\n  // 强制 window.open 打开当前页\n  const lockWindowOpen = () => {\n    try {\n      if (window.open.toString().includes('Proxy')) return; // 避免重复代理\n      window.open = new Proxy(window.open, {\n        apply(target, ctx, args) {\n          let [url, targetName = '_self', features] = args;\n          if (typeof url === 'string' && url.startsWith('//')) {\n            url = location.protocol + url;\n          }\n          return Reflect.apply(target, ctx, [url, targetName, features]);\n        }\n      });\n    } catch (e) {\n      console.error('Error locking window.open:', e);\n    }\n  };\n\n  // 清除 a[target=\"_blank\"]（迭代版，防止栈溢出）\n  const fastCleanLinks = (root, maxDepth = CONFIG.SHADOW_DEPTH) => {\n    const stack = [{ node: root, depth: 0 }];\n    const visited = new WeakSet(); // 防止重复访问 shadowRoot\n\n    while (stack.length > 0) {\n      const { node, depth } = stack.pop();\n\n      if (!node || visited.has(node)) continue;\n      visited.add(node);\n\n      try {\n        // 清理当前作用域下的 _blank 链接（排除搜索框链接）\n        const links = node.querySelectorAll?.('a[target=\"_blank\"]:not(#search-box-link)');\n        if (links) {\n          links.forEach(a => {\n            try {\n              a.removeAttribute('target');\n            } catch (e) {\n              console.debug('Failed to remove target:', a, e);\n            }\n          });\n        }\n\n        // 递归处理 Shadow DOM（限制深度）\n        if (depth < maxDepth) {\n          const children = node.querySelectorAll?.('*') || [];\n          // 逆序 push，保证遍历顺序接近原顺序\n          for (let i = children.length - 1; i >= 0; i--) {\n            const el = children[i];\n            if (el.shadowRoot) {\n              stack.push({ node: el.shadowRoot, depth: depth + 1 });\n            }\n          }\n        }\n      } catch (e) {\n        console.warn('Error processing node in fastCleanLinks:', e);\n      }\n    }\n  };\n\n  // 节流函数（带 trailing，防止遗漏最后一次调用）\n  function throttle(fn, wait) {\n    let timeout = null;\n    let lastArgs = null;\n\n    const run = () => {\n      if (lastArgs) {\n        fn.apply(null, lastArgs);\n        lastArgs = null;\n        timeout = setTimeout(run, wait);\n      } else {\n        timeout = null;\n      }\n    };\n\n    return function (...args) {\n      lastArgs = args;\n      if (!timeout) {\n        timeout = setTimeout(run, wait);\n      }\n    };\n  }\n\n  // DOM 变化队列处理\n  let mutationQueue = [];\n  const processMutations = () => {\n    mutationQueue.forEach(mutation => {\n      const target = mutation.target;\n      if (mutation.type === 'attributes') {\n        if (target instanceof HTMLElement && target.hasAttribute('target') && !target.matches('#search-box-link')) {\n          target.removeAttribute('target');\n        }\n      } else if (target instanceof Element) {\n        fastCleanLinks(target);\n      }\n    });\n    mutationQueue = [];\n  };\n\n  const throttledProcess = throttle(processMutations, CONFIG.OBSERVER_THROTTLE);\n\n  // 启动 MutationObserver\n  const observer = new MutationObserver(mutations => {\n    mutationQueue.push(...mutations);\n    throttledProcess();\n  });\n\n  function observeDOM() {\n    const target = document.documentElement || document.body;\n    if (!target) return;\n\n    observer.observe(target, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['target']\n    });\n\n    // 初始清理\n    fastCleanLinks(target);\n  }\n\n  // 拦截点击行为（仅针对 target=\"_blank\" 的链接）\n  document.addEventListener('click', e => {\n    // 忽略右键、Ctrl/Command+点击、Shift+点击\n    if (e.button !== 0 || e.ctrlKey || e.metaKey || e.shiftKey) return;\n\n    // 只处理 target=\"_blank\" 的 <a> 标签\n    const anchor = e.composedPath().find(el => {\n      return el instanceof HTMLAnchorElement && el.target === '_blank';\n    });\n\n    if (!anchor) return; // 非 _blank 链接，放行\n\n    // 排除特殊情况\n    if (\n      anchor.getAttribute('role') === 'button' ||\n      anchor.onclick ||\n      anchor.href.startsWith('javascript:') ||\n      anchor.id === 'search-box-link'\n    ) {\n      return; // 放行，由原逻辑处理\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n\n    const url = anchor.href.startsWith('//')\n      ? location.protocol + anchor.href\n      : anchor.href;\n\n    location.assign(url);\n  }, true); // 使用捕获阶段，尽早拦截\n\n  // 禁用 Ctrl+滚轮缩放\n  window.addEventListener('wheel', e => {\n    if (e.ctrlKey) e.preventDefault();\n  }, { passive: false });\n\n  // 禁用手势缩放（移动端）\n  ['gesturestart', 'gesturechange', 'gestureend'].forEach(type => {\n    window.addEventListener(type, e => e.preventDefault());\n  });\n\n  // 全局字体注入\n  const TARGET_FONT = 'Microsoft Yahei, Helvetica Neue, Helvetica, Arial, Hiragino Sans GB, Heiti SC, Malgun Gothic, sans-serif';\n\n  function injectGlobalFontStyle() {\n    if (document.getElementById('custom-global-font-style')) return;\n    const style = document.createElement('style');\n    style.id = 'custom-global-font-style';\n    style.textContent = `\n      body, body * {\n        font-family: ${TARGET_FONT} !important;\n      }\n    `.trim();\n    document.head.appendChild(style);\n  }\n\n  // 拦截 history 操作，重新注入字体和清理链接\n  function hookFontStyleReinjection() {\n    const reapply = () => {\n      injectGlobalFontStyle();\n      fastCleanLinks(document.documentElement);\n    };\n\n    // 使用 Proxy 代理，避免破坏原函数\n    history.pushState = new Proxy(history.pushState, {\n      apply: (target, thisArg, args) => {\n        const result = Reflect.apply(target, thisArg, args);\n        reapply();\n        return result;\n      }\n    });\n\n    history.replaceState = new Proxy(history.replaceState, {\n      apply: (target, thisArg, args) => {\n        const result = Reflect.apply(target, thisArg, args);\n        reapply();\n        return result;\n      }\n    });\n\n    window.addEventListener('popstate', reapply);\n    reapply(); // 初始执行一次\n  }\n\n  // 初始化\n  (function init() {\n    lockWindowOpen();\n    injectGlobalFontStyle();\n    observeDOM();\n    hookFontStyleReinjection();\n\n    // 页面加载后清理一次\n    const cleanup = () => fastCleanLinks(document.body);\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', cleanup);\n    } else {\n      cleanup();\n    }\n  })();\n\n  // 定时保险机制（降低频率）\n  const defenseTimer = setInterval(() => {\n    lockWindowOpen();\n    fastCleanLinks(document.documentElement);\n  }, CONFIG.LOCK_INTERVAL);\n\n  // 页面卸载时清理定时器\n  window.addEventListener('unload', () => {\n    clearInterval(defenseTimer);\n    observer.disconnect();\n  });\n\n})();","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"","title":"哔哩哔哩PWA","url":"https://www.bilibili.com/","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0","width":800,"height":600,"theme":null,"resizable":true,"fullscreen":false,"maximized":true,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1280,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"bili","showName":"哔哩哔哩PWA","version":"0.0.1","webUrl":"https://www.bilibili.com/","id":"com.douyin.app.ios","icon":"./app-icon.png","desc":"PakePlus Project","pubBody":"PakePlus android build body","isHtml":false,"debug":false},"android":{"name":"bili","showName":"哔哩哔哩PWA","version":"0.0.1","webUrl":"https://www.bilibili.com/","id":"com.douyin.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"PakePlus Project","pubBody":"PakePlus android build body","isHtml":false,"debug":false},"desktop":{"name":"bili","showName":"哔哩哔哩PWA","version":"0.0.1","id":"com.douyin.app.desktop","desc":"PakePlus Project","webUrl":"https://www.bilibili.com/","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"PakePlus desktop build body","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"debug":false,"buildMethod":"cloud"}}